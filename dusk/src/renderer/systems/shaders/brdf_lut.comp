#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_include : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "common.glsl"
#include "brdf.glsl"

// write a vec2 result per texel (R = scale, G = bias typically)
layout (local_size_x = 16, local_size_y = 16) in;

// output image (write-only), 32-bit float per component
layout (binding = 0, rgba32f) writeonly uniform image2D brdfLUT[];

layout(push_constant) uniform PushConstant 
{
	int lutTextureIdx;
} push;

float radicalInverse_VdC(uint bits) 
{
     bits = (bits << 16u) | (bits >> 16u);
     bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
     bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
     bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
     bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
     return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}
// ----------------------------------------------------------------------------
vec2 hammersley(uint i, uint N)
{
	return vec2(float(i)/float(N), radicalInverse_VdC(i));
}

// Importance sample GGX (normal = (0,0,1))
vec3 importanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
	float a = roughness*roughness;
	
	float phi = 2.0 * PI * Xi.x;
	float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
	float sinTheta = sqrt(1.0 - cosTheta*cosTheta);
	
	// from spherical coordinates to cartesian coordinates - halfway vector
	vec3 H;
	H.x = cos(phi) * sinTheta;
	H.y = sin(phi) * sinTheta;
	H.z = cosTheta;
	
	// from tangent-space H vector to world-space sample vector
	vec3 up          = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	vec3 tangent   = normalize(cross(up, N));
	vec3 bitangent = cross(N, tangent);
	
	vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
	return normalize(sampleVec);
}

// Integrate BRDF (returns vec2: (scale, bias) or other mapped result)
vec2 integrateBRDF(float NdotV, float roughness)
{
    const uint SAMPLE_COUNT = 1024u; // tweak for quality vs speed

    vec3 V;
    V.x = sqrt(1.0 - NdotV * NdotV); // sin from cos
    V.y = 0.0;
    V.z = NdotV;

    float A = 0.0;
    float B = 0.0;

    vec3 N = vec3(0.0, 0.0, 1.0);
    
    // different k for IBL
    // UE/most use k = (alpha^2)/2 for visibility approx
    float k = (roughness * roughness) / 2.0;

    // Random sequence seed per sample — using a simple Hammersley/Van der Corput.
    for (uint i = 0u; i < SAMPLE_COUNT; ++i)
    {
        vec2 Xi = hammersley(i, SAMPLE_COUNT);
        vec3 H = importanceSampleGGX(Xi, N, roughness);
        vec3 L = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(L.z, 0.0);
        float NdotH = max(H.z, 0.0);
        float VdotH = max(dot(V, H), 0.0);

        if (NdotL > 0.0)
        {
            float G = geometrySmith(N, V, L, k);
            float G_Vis = (G * VdotH) / (NdotH * NdotV);
            float Fc = pow(1.0 - VdotH, 5.0);

            A += (1.0 - Fc) * G_Vis;
            B += Fc * G_Vis;
        }
    }

    A /= float(SAMPLE_COUNT);
    B /= float(SAMPLE_COUNT);

    return vec2(A, B);
}

void main()
{
    int lutTexIdx = nonuniformEXT(push.lutTextureIdx);

    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(brdfLUT[lutTexIdx]);

    if (pix.x >= size.x || pix.y >= size.y)
        return;

    // map pixel coords -> NdotV, roughness
    // Note: Beware of the sampling of this texture. If address mode is repeat
    // then x = 1.0 will be sampled for values where x is near 0 as x max of 
    // the generated texture is somewhere around 0.98. This will create artifacts
    // which will match colors at edges of the object
    float NdotV = (float(pix.x) + 0.5) / float(size.x); // [0,1]
    float roughness = 1 - (float(pix.y) + 0.5) / float(size.y); // [0,1]

    vec2 integrated = integrateBRDF(NdotV, roughness);

    // store to image (R=scale A, G=bias B)
    imageStore(brdfLUT[lutTexIdx], pix, vec4(integrated.xy, 0.0, 1.0));
    //imageStore(brdfLUT[lutTexIdx], pix, vec4(NdotV, roughness, 0.0, 1.0));
}
