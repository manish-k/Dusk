#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_include : enable

#include "common.glsl"
#include "brdf.glsl"

// write a vec2 result per texel (R = scale, G = bias typically)
layout (local_size_x = 16, local_size_y = 16) in;

// output image (write-only), 32-bit float per component
layout (binding = 0, rgba32f) writeonly uniform image2D brdfLUT;

// Importance sample GGX (normal = (0,0,1))
vec3 importanceSampleGGX(vec2 Xi, float roughness)
{
    float a = roughness * roughness;

    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
    float sinTheta = sqrt(max(0.0, 1.0 - cosTheta * cosTheta));

    vec3 H;
    H.x = sinTheta * cos(phi);
    H.y = sinTheta * sin(phi);
    H.z = cosTheta;
    return normalize(H);
}

// Integrate BRDF (returns vec2: (scale, bias) or other mapped result)
vec2 integrateBRDF(float NdotV, float roughness)
{
    const uint SAMPLE_COUNT = 1024u; // tweak for quality vs speed

    vec3 V;
    V.x = sqrt(1.0 - NdotV * NdotV); // sin from cos
    V.y = 0.0;
    V.z = NdotV;

    float A = 0.0;
    float B = 0.0;

    vec3 N = vec3(0.0, 0.0, 1.0);

    float a = roughness * roughness;
    
    // different k for IBL
    // UE/most use k = (alpha^2)/2 for visibility approx
    float k = (a * a) / 2.0;

    // Random sequence seed per sample — using a simple Hammersley/Van der Corput.
    for (uint i = 0u; i < SAMPLE_COUNT; ++i)
    {
        // Hammersley point (i / N, radicalInverseVdC(i))
        float u = float(i) / float(SAMPLE_COUNT);

        // radical inverse base 2
        uint bits = i;
        bits = (bits << 16u) | (bits >> 16u);
        bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
        bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
        bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
        bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
        float v = float(bits) * 2.3283064365386963e-10; // / 2^32

        vec2 Xi = vec2(u, v);
        vec3 H = importanceSampleGGX(Xi, roughness);
        vec3 L = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(L.z, 0.0);
        float NdotH = max(H.z, 0.0);
        float VdotH = max(dot(V, H), 0.0);

        if (NdotL > 0.0)
        {
            float G = geometrySmith(N, V, L, k);
            float G_Vis = (G * VdotH) / (NdotH * NdotV);
            float Fc = pow(1.0 - VdotH, 5.0);

            A += (1.0 - Fc) * G_Vis;
            B += Fc * G_Vis;
        }
    }

    A /= float(SAMPLE_COUNT);
    B /= float(SAMPLE_COUNT);

    return vec2(A, B);
}

void main()
{
    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(brdfLUT);

    if (pix.x >= size.x || pix.y >= size.y)
        return;

    // map pixel coords -> NdotV, roughness
    float NdotV = (float(pix.x) + 0.5) / float(size.x); // [0,1]
    float roughness = (float(pix.y) + 0.5) / float(size.y); // [0,1]
    // remap NdotV from [0,1] to [0,1] (identity), but most use (NdotV)
    // We avoid NdotV = 0 singularities usually by clamping inside IntegrateBRDF if needed.

    vec2 integrated = integrateBRDF(NdotV, roughness);

    // store to image (R=scale A, G=bias B)
    imageStore(brdfLUT, pix, vec4(integrated.xy, 0.0, 0.0));
}
